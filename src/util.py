import os
from PIL import Image
from matplotlib import pyplot as plt
import torch


def save_generated_images(generator, num_images, device, output_path: str):
    """
    Saves a batch of example images generated by the generator in a grid.
    """
    generator.eval()
    with torch.no_grad():
        noise = torch.randn(num_images, 100).to(device)
        images = generator(noise)

        # Reverse the normalization form [-1, 1] to [0, 1]
        images = (images + 1) / 2

        # Convert the tensor to a numpy array in the range with shape (3, 32, 32)
        images = images.cpu().detach().numpy().transpose(0, 2, 3, 1)

        plt.figure(figsize=(10, 10))
        for i in range(num_images):
            plt.subplot(4, 4, i + 1)
            plt.imshow(images[i], cmap="gray")
            plt.axis("off")

        os.makedirs(os.path.dirname(output_path), exist_ok=True)
        plt.savefig(output_path)


def alpha_to_white(img):
    """
    Convert an image with transparency to an RGB image with a white background.

    If the image has an alpha channel, composite it over a white background.
    """
    if img.mode in ("RGBA", "LA") or (img.mode == "P" and "transparency" in img.info):
        # Ensure the image is in RGBA mode
        img = img.convert("RGBA")
        # Create a white background image of the same size
        white_bg = Image.new("RGBA", img.size, (255, 255, 255, 255))
        # Composite the image on top of the white background using the alpha channel as mask
        img = Image.alpha_composite(white_bg, img)
    # Convert to RGB (this drops the alpha channel if it exists)
    return img.convert("RGB")
